





















































در ضمن سکشن هایی که داخلشون seat ها قرار میگیرن نباید ازشون خارج بشن و باید یه جورایی جزوی از section بشن اون صندلی ها..
هر جا که نیازه تغییر بده تا پروژه به درستی در همه موارد کار کنه و اگه باگی میبینی یا چیزیو میبینی که بنظرت باید تغییر کنه تا اصولی باشه میتونی تغییر بدی ولی با بقیه کد ها سازگار باشه
حالا شروع کن


import { Toaster } from "@/components/ui/sonner";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useQuery, useMutation } from "@tanstack/react-query";
import { TooltipProvider } from "@/components/ui/tooltip.tsx";
import { useSeatMapStore } from "@/stores/seatMapStore.ts";
import { useEffect, useState } from "react";
import { SeatToolbar } from "@/components/SeatToolbar.tsx";
import { SeatMapCanvas } from "./components/SeatMapCanvas";
import { toast } from "sonner";
import { Progress } from '@/components/ui/progress';
import { Loader, Save, MapPin } from 'lucide-react';
import * as api from '@/services/api';


function App() {
  const { seatMap, setSeatMap } = useSeatMapStore();
  const [activeTab, setActiveTab] = useState("canvas");
  const [isExporting, setIsExporting] = useState(false);
  const [isLoadingVenue, setIsLoadingVenue] = useState(false);


  // Verify token first
  const tokenVerification = useQuery({
    queryKey: ['tokenVerification'],
    queryFn: api.verifyToken,
    retry: 3,  // افزایش تعداد تلاش‌ها
    retryDelay: 1000,  // تاخیر بین تلاش‌ها
    onError: (error) => {
      console.error('Token verification failed:', error);
      toast.error("Authentication failed", {
        description: "Unable to verify your access token. Please try again later."
      });


      // در صورت خطا، اجازه دهید برنامه با داده‌های پیش‌فرض کار کند
      if (venueQuery.isError || !venueQuery.data) {
        setSeatMap({
          title: "نقشه سالن پیش‌فرض",
          venue: "سالن پیش‌فرض",
          stage: {
            x: 1200,
            y: 100,
            width: 600,
            height: 80,
            name: 'صحنه اجرا',
            floorId: 'floor-1'
          },
          sections: [],
          seats: [],
          floors: [
            { id: 'floor-1', name: 'طبقه همکف', level: 1 }
          ],
          activeFloorId: 'floor-1'
        });
      }
    }
  });


  // Fetch venue data after token verification
// Fetch venue data after token verification
const venueQuery = useQuery({
  queryKey: ['venue'],
  queryFn: api.fetchVenue,
  // اجازه دهید حتی در صورت خطای احراز هویت، تلاش کند داده‌ها را بگیرد
  enabled: !tokenVerification.isLoading,
  retry: 3,
  retryDelay: 1000,
  onSuccess: (response) => {
    // Extract the venue data from the response
    const venueData = response.data?.venue;
    
    if (!venueData) {
      toast.error("Invalid venue data format", {
        description: "The venue data received from the server is not in the expected format."
      });
      return;
    }
    
    // Convert venue data to our SeatMap format
    const convertedSeatMap = api.convertVenueToSeatMap(venueData);
    setSeatMap(convertedSeatMap);
    toast.success("Venue data loaded", {
      description: `Successfully loaded "${venueData.name}" venue data.`
    });
  },
  onError: (error) => {
    console.error('Error fetching venue data:', error);
    toast.error("Failed to load venue data", {
      description: "There was an error loading the venue data. Please try again later."
    });
  }
});



  // Save venue mutation
  const saveMutation = useMutation({
    mutationFn: api.saveVenue,
    onSuccess: () => {
      toast.success("ذخیره موفقیت‌آمیز", {
        description: "نقشه سالن با موفقیت در سرور ذخیره شد."
      });
    },
    onError: (error) => {
      console.error('Error saving venue data:', error);
      toast.error("خطا در ذخیره‌سازی", {
        description: "مشکلی در ذخیره‌سازی نقشه سالن رخ داد. لطفاً دوباره تلاش کنید."
      });
    }
  });


  // Check if we're loading data
  const isLoading = tokenVerification.isLoading || venueQuery.isLoading;
  const hasError = tokenVerification.isError || venueQuery.isError;
  const isSaving = saveMutation.isPending;


  useEffect(() => {
    document.title = "طراحی نقشه سالن - بلیتو";


    // Center the view on the stage when the component mounts
    const timer = setTimeout(() => {
      const canvasContainer = document.querySelector('.flex-1.relative.overflow-hidden');
      if (canvasContainer) {
        canvasContainer.scrollTo({
          left: 1500 - canvasContainer.clientWidth / 2,
          top: 1500 - canvasContainer.clientHeight / 2,
          behavior: 'smooth'
        });
      }
    }, 100);


    return () => clearTimeout(timer);
  }, []);


  const handleExport = async () => {
    setIsExporting(true);
    try {
      const blob = new Blob([JSON.stringify(seatMap, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${seatMap.title || 'seat-map'}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      toast.success("Export Complete", {
        description: "Seat map has been exported successfully."
      });
    } catch (error) {
      console.error('Export error:', error);
      toast.error("Export Failed", {
        description: "There was an error exporting the seat map.",
      });
    } finally {
      setIsExporting(false);
    }
  };



  const handleSave = async () => {
    try {
      // ذخیره نقشه در سرور
      await saveMutation.mutateAsync(seatMap);
      
      // بارگذاری مجدد نقشه از سرور برای تأیید ذخیره‌سازی
      await handleLoadVenueMap();
      
      toast.success("ذخیره موفقیت‌آمیز", {
        description: "نقشه سالن با موفقیت در سرور ذخیره شد و مجدداً بارگذاری شد."
      });
    } catch (error) {
      console.error('Error in save operation:', error);
      toast.error("خطا در ذخیره‌سازی", {
        description: "مشکلی در ذخیره‌سازی نقشه سالن رخ داد. لطفاً دوباره تلاش کنید."
      });
    }
  };


  const handleNewMap = () => {
    if (window.confirm("ایجاد نقشه جدید؟ تغییرات ذخیره نشده از بین خواهند رفت.")) {
      setSeatMap({
        title: "نقشه سالن جدید",
        venue: "سالن جدید",
        stage: {
          x: 1200,
          y: 100,
          width: 600,
          height: 80,
          name: 'صحنه اجرا',
          floorId: 'floor-1'
        },
        sections: [],
        seats: [],
        floors: [
          { id: 'floor-1', name: 'طبقه همکف', level: 1 }
        ],
        activeFloorId: 'floor-1'
      });
      toast("نقشه جدید ایجاد شد", {
        description: "یک نقشه سالن جدید ایجاد شد."
      });
    }
  };


  // New function to load venue map from API
  // New function to load venue map from API
  // New function to load venue map from API
// New function to load venue map from API
const handleLoadVenueMap = async () => {
  setIsLoadingVenue(true);
  try {
    // دریافت داده‌های سالن مستقیماً از API
    const response = await api.fetchVenue();
    
    console.log('Full API response:', response);
    
    if (!response || !response.data || !response.data.venue) {
      console.error('Invalid response structure:', response);
      throw new Error('داده‌های سالن از API دریافت نشد');
    }
    
    // استخراج داده‌های واقعی سالن از پاسخ
    const venueData = response.data.venue;
    console.log('Extracted venue data:', venueData);
    
    // تبدیل داده‌های سالن به فرمت SeatMap
    const convertedSeatMap = api.convertVenueToSeatMap(venueData);
    console.log('Converted seat map:', convertedSeatMap);
    
    // به‌روزرسانی state با نقشه جدید
    setSeatMap(convertedSeatMap);
    
    toast.success("نقشه سالن بارگذاری شد", {
      description: `نقشه سالن "${venueData.name}" با موفقیت بارگذاری شد.`
    });
    
    // مرکز قرار دادن نما روی صحنه
    setTimeout(() => {
      const canvasContainer = document.querySelector('.flex-1.relative.overflow-hidden');
      if (canvasContainer) {
        canvasContainer.scrollTo({
          left: convertedSeatMap.stage.x - canvasContainer.clientWidth / 2,
          top: convertedSeatMap.stage.y - canvasContainer.clientHeight / 2,
          behavior: 'smooth'
        });
      }
    }, 100);
  } catch (error) {
    console.error('Error loading venue map:', error);
    toast.error("خطا در بارگذاری نقشه", {
      description: "مشکلی در بارگذاری نقشه سالن از سرور رخ داد. لطفاً دوباره تلاش کنید."
    });
  } finally {
    setIsLoadingVenue(false);
  }
};
  return (
    <>
      <TooltipProvider>
        <Toaster />
        <div className="min-h-screen flex flex-col bg-gray-50">
          {/* Header */}
          <header className="bg-white shadow z-10">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex justify-between items-center">
              <div className="flex items-center space-x-4">
                <h1 className="text-2xl font-bold text-gray-900">
                  طراحی نقشه بلیتو
                </h1>
              </div>
              <div className="flex space-x-2">
                <Button variant="outline" onClick={handleNewMap}>بازنشانی</Button>
                {/* New button to load venue map from API */}
                {/* New button to load venue map from API */}
                <Button
                  variant="outline"
                  onClick={handleLoadVenueMap}
                  disabled={isLoadingVenue}
                  className="bg-blue-50 hover:bg-blue-100"
                >
                  {isLoadingVenue ? (
                    <Loader className="h-4 w-4 animate-spin ml-2" />
                  ) : (
                    <MapPin className="h-4 w-4 ml-2" />
                  )}
                  {venueQuery.data?.data?.venue?.name ? `نمایش نقشه ${venueQuery.data.data.venue.name}` : "نمایش نقشه سالن"}
                </Button>
                <Button
                  variant="outline"
                  onClick={handleExport}
                  disabled={isExporting}
                >
                  {isExporting ? <Loader className="h-4 w-4 animate-spin ml-2" /> : null}
                  خروجی
                </Button>
                <Button
                  variant="default"
                  onClick={handleSave}
                  disabled={isSaving}
                  className="bg-green-600 hover:bg-green-700"
                >
                  {isSaving ? (
                    <Loader className="h-4 w-4 animate-spin ml-2" />
                  ) : (
                    <Save className="h-4 w-4 ml-2" />
                  )}
                  ذخیره در سرور
                </Button>
                <Button variant="outline">
                  خروج
                </Button>
              </div>
            </div>
          </header>
          {/* Main content */}
          <main className="flex-1 flex overflow-hidden">
            {/* Tools sidebar */}
            <div className="w-64 bg-white border-r border-gray-200 overflow-y-auto">
              <SeatToolbar />
            </div>
            {/* Main canvas area */}
            <div className="flex-1 flex flex-col overflow-hidden">
              <Tabs value={activeTab} onValueChange={setActiveTab}
                className="flex-1 flex flex-col overflow-hidden">
                <div className="bg-white border-b border-gray-200 px-4">
                  <TabsList className="grid w-full grid-cols-2">
                    <TabsTrigger value="preview">
                      پیشنمایش
                    </TabsTrigger>
                    <TabsTrigger value="canvas">
                      ویرایشگر
                    </TabsTrigger>
                  </TabsList>
                </div>
                <TabsContent value="canvas" className="flex-1 overflow-auto p-4">
                  <SeatMapCanvas editable={true} isLoading={isLoading} />
                </TabsContent>
                <TabsContent value="preview" className="flex-1 overflow-auto p-4 bg-gray-100">
                  <SeatMapCanvas editable={false} isLoading={isLoading} />
                </TabsContent>
              </Tabs>
            </div>
            {/* Loading Indicator for API Operations */}
            {isLoading && (
              <div className="fixed bottom-4 right-4 bg-white p-4 rounded-lg shadow-lg z-50">
                <div className="flex items-center space-x-2">
                  <Loader className="h-4 w-4 animate-spin" />
                  <span>در حال بارگذاری اطلاعات...</span>
                </div>
                <Progress value={75} className="mt-2" />
              </div>
            )}
            {/* Venue Loading Indicator */}
            {isLoadingVenue && (
              <div className="fixed bottom-4 right-4 bg-white p-4 rounded-lg shadow-lg z-50">
                <div className="flex items-center space-x-2">
                  <Loader className="h-4 w-4 animate-spin" />
                  <span>در حال بارگذاری نقشه سالن میلاد...</span>
                </div>
                <Progress value={75} className="mt-2" />
              </div>
            )}
            {/* Saving Indicator */}
            {isSaving && (
              <div className="fixed bottom-4 right-4 bg-white p-4 rounded-lg shadow-lg z-50">
                <div className="flex items-center space-x-2">
                  <Loader className="h-4 w-4 animate-spin" />
                  <span>در حال ذخیره‌سازی نقشه سالن...</span>
                </div>
                <Progress value={75} className="mt-2" />
              </div>
            )}
            {/* Error Message */}
            {hasError && (
              <div className="fixed top-4 left-1/2 transform -translate-x-1/2 bg-red-50 p-4 rounded-lg shadow-lg z-50 border border-red-200">
                <div className="flex items-center text-red-700">
                  <span className="font-medium">خطا در بارگذاری اطلاعات. لطفاً دوباره تلاش کنید.</span>
                </div>
              </div>
            )}
          </main>
        </div>
      </TooltipProvider>
    </>
  );
}


export default App;

import type { SeatMap } from '@/types/seatMap';


// استفاده از مسیر نسبی برای پروکسی
const API_URL = '/api/';
const TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.7ygcyDSdxMe3_PJbrFTo0OFzCbEDmPDcfFoYIxBUxlI";


const handleResponse = async (response: Response) => {
  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`API error: ${response.status} - ${errorText}`);
  }
  return await response.json();
};


// Verify token validity
export const verifyToken = async () => {
  const response = await fetch(`${API_URL}auth`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ token: TOKEN }),
  });
  return handleResponse(response);
};


// Fetch venue information
// Fetch venue information
export const fetchVenue = async () => {
  const response = await fetch(`${API_URL}venue`, {
    headers: {
      'Authorization': `Bearer ${TOKEN}`,
    },
  });
  return handleResponse(response);
};


// Convert venue data to our SeatMap format
export const convertVenueToSeatMap = (venueData: any): SeatMap => {
  // Check if venueData exists
  if (!venueData) {
    throw new Error('No venue data provided');
  }


  console.log('Converting venue data:', venueData);


  // Extract floors with null check
  const floors = venueData.floors?.map((floor: any) => ({
    id: floor.id,
    name: floor.name,
    level: floor.level
  })) || [];


  // Extract sections with null checks
  const sections = venueData.floors?.flatMap((floor: any) => 
    floor.sections?.map((section: any) => ({
      id: section.id,
      name: section.name,
      code: section.code,
      shape: section.shape,
      x: section.x,
      y: section.y,
      width: section.width,
      height: section.height,
      color: section.background || '#D3E4FD',
      floorId: floor.id
    })) || []
  ) || [];


  // Extract seats with null checks
  const seats = venueData.floors?.flatMap((floor: any) => 
    floor.sections?.flatMap((section: any) =>
      section.seats?.map((seat: any) => ({
        id: seat.id,
        row: seat.row,
        number: seat.number,
        type: seat.type,
        status: seat.is_active ? 'available' : 'disabled',
        x: section.x + seat.x,
        y: section.y + seat.y,
        price: seat.price,
        sectionId: section.id,
        floorId: floor.id
      })) || []
    ) || []
  ) || [];


  // Create the SeatMap object
  return {
    title: venueData.name || 'سالن بدون نام',
    venue: venueData.name || 'سالن بدون نام',
    stage: {
      x: venueData.stage?.x || 1200,
      y: venueData.stage?.y || 100,
      width: venueData.stage?.width || 600,
      height: venueData.stage?.height || 80,
      name: venueData.stage?.name || 'صحنه اجرا',
      floorId: venueData.stage?.floorId || (floors[0]?.id || 'floor-1')
    },
    sections,
    seats,
    floors,
    activeFloorId: floors[0]?.id || 'floor-1'
  };
};



// Convert SeatMap to venue format for saving
export const convertSeatMapToVenue = (seatMap: SeatMap): any => {
  // Create floors with sections and seats
  const floors = seatMap.floors.map(floor => {
    // Get sections for this floor
    const floorSections = seatMap.sections.filter(section => section.floorId === floor.id);
    
    // Map sections with their seats
    const sections = floorSections.map(section => {
      // Get seats for this section
      const sectionSeats = seatMap.seats.filter(seat => seat.sectionId === section.id);
      
      // Map seats to API format
      const seats = sectionSeats.map(seat => {
        // Generate new ID if it starts with "new-"
        const id = seat.id.startsWith('new-') ? 
          `new-${Math.random().toString(36).substring(2, 9)}` : 
          seat.id;
        
        return {
          id,
          row: seat.row || '',
          number: seat.number || '',
          type: seat.type || 'regular',
          is_active: seat.status === 'available',
          price: Number(seat.price) || 0,
          x: Number(seat.x - section.x) || 0, // Relative to section
          y: Number(seat.y - section.y) || 0  // Relative to section
        };
      });
      
      // Generate new ID if it starts with "new-"
      const id = section.id.startsWith('new-') ? 
        `new-${Math.random().toString(36).substring(2, 9)}` : 
        section.id;
      
      return {
        id,
        name: section.name || '',
        code: section.code || `SECTION-${section.id.substring(0, 8)}`,
        shape: section.shape || 'rectangle',
        x: Number(section.x) || 0,
        y: Number(section.y) || 0,
        width: Number(section.width) || 100,
        height: Number(section.height) || 100,
        background: section.color || '#D3E4FD',
        color: '#FFFFFF',
        seats
      };
    });
    
    // Generate new ID if it starts with "new-"
    const id = floor.id.startsWith('new-') ? 
      `new-${Math.random().toString(36).substring(2, 9)}` : 
      floor.id;
    
    return {
      id,
      name: floor.name || '',
      level: Number(floor.level) || 1,
      sections
    };
  });
  
  // Create the venue object
  return {
    id: seatMap.id || `new-${Math.random().toString(36).substring(2, 9)}`,
    name: seatMap.title || seatMap.venue || 'سالن جدید',
    stage: {
      x: Number(seatMap.stage.x) || 1200,
      y: Number(seatMap.stage.y) || 100,
      width: Number(seatMap.stage.width) || 600,
      height: Number(seatMap.stage.height) || 80,
      name: seatMap.stage.name || 'صحنه اجرا',
      background: "#000000",
      color: "#FFFFFF",
      floorId: seatMap.stage.floorId || floors[0]?.id || 'floor-1'
    },
    floors
  };
};


// Save venue data to the API
// Save venue data to the API
export const saveVenue = async (seatMap: SeatMap) => {
  const venueData = convertSeatMapToVenue(seatMap);
  
  console.log('Saving venue data:', venueData);
  
  const response = await fetch(`${API_URL}venue`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${TOKEN}`,
    },
    body: JSON.stringify(venueData),
  });
  
  const result = await handleResponse(response);
  console.log('Save venue response:', result);
  
  return result;
};

import React, {useEffect, useState} from "react";
import {useSeatMapCanvas} from '@/hooks/useSeatMapCanvas';
import {ZoomControls} from '@/components/canvas/ZoomControls';
import {ToolSelector} from '@/components/canvas/ToolSelector';
import {SeatElement} from '@/components/canvas/SeatElement';
import {SectionElement} from "@/components/canvas/SectionElement";
import {FloorSelector} from '@/components/canvas/FloorSelector';
import {StageElement} from '@/components/canvas/StageElement';
import {toast} from "sonner";
import {Skeleton} from '@/components/ui/skeleton';


interface SeatMapCanvasProps {
editable: boolean;
isLoading?: boolean;
}


export const SeatMapCanvas: React.FC<SeatMapCanvasProps> = ({editable, isLoading = false}) => {
const {
seatMap,
selectedTool,
setSelectedTool,
scale,
dragging,
originX,
originY,
canvasRef,
containerRef,
removeElement,
zoomIn,
zoomOut,
resetZoom,
handleMouseDown,
handleMouseMove,
handleMouseUp,
handleElementMouseDown,
handleResizerMouseDown,
handleCanvasClick
} = useSeatMapCanvas();


const [showHelp, setShowHelp] = useState<boolean>(false);


useEffect(() => {
// We'll use this effect to display toasts when needed
if (selectedTool) {
    const handleKeyPress = (e: KeyboardEvent) => {
        if (e.key === "Escape") {
            setSelectedTool(null);
        }
    };
    window.addEventListener('keydown', handleKeyPress);
    return () => {
        window.removeEventListener('keydown', handleKeyPress);
    }
}
}, [selectedTool, setSelectedTool]);


// Keyboard shortcut event listener
useEffect(() => {
if (!editable) return; // Only add shortcuts when canvas is editable


const handleKeyboardShortcuts = (e: KeyboardEvent) => {
    // Ignore shortcuts when user is typing in input fields
    if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {
        return;
    }
    
    switch (e.key.toLowerCase()) {
        case 's':
            setSelectedTool(selectedTool === 'seat' ? null : 'seat');
            toast(selectedTool === 'seat' ? "Seat tool deactivated" : "Seat tool activated", {
                duration: 2000,
            });
            break;
        case 'c':
            setSelectedTool(selectedTool === 'section' ? null : 'section');
            toast(selectedTool === 'section' ? "Section tool deactivated" : "Section tool activated", {
                duration: 2000,
            });
            break;
        case 't':
            setSelectedTool(selectedTool === 'stage' ? null : 'stage');
            toast(selectedTool === 'stage' ? "Stage tool deactivated" : "Stage tool activated", {
                duration: 2000,
            });
            break;
        case 'm':
            setSelectedTool(selectedTool === 'move' ? null : 'move');
            toast(selectedTool === 'move' ? "Move tool deactivated" : "Move tool activated", {
                duration: 2000,
            });
            break;
        case 'escape':
            if (selectedTool) {
                setSelectedTool(null);
                toast("Tool selection canceled", {
                    duration: 2000,
                });
            }
            break;
        case '+':
        case '=':
            zoomIn();
            break;
        case '-':
            zoomOut();
            break;
        case '0':
            resetZoom();
            break;
        case 'h':
            setShowHelp(prev => !prev);
            break;
        default:
            break;
    }
};


window.addEventListener('keydown', handleKeyboardShortcuts);
return () => {
    window.removeEventListener('keydown', handleKeyboardShortcuts);
};
}, [editable, selectedTool, setSelectedTool, zoomIn, zoomOut, resetZoom]);


// Get elements for current floor only
const activeFloorId = seatMap.activeFloorId;
const visibleSeats = seatMap.seats.filter(seat => seat.floorId === activeFloorId);
const visibleSections = seatMap.sections.filter(section => section.floorId === activeFloorId);
const showStage = seatMap.stage.floorId === activeFloorId;


// Loading state content
if (isLoading) {
return (
    <div className="relative w-full h-full flex flex-col">
        <div className="absolute top-4 left-4 z-10">
            <Skeleton className="h-8 w-24"/>
        </div>
        {editable && (
            <div className="absolute top-4 right-4 z-10">
                <Skeleton className="h-8 w-32"/>
            </div>
        )}
        <div className="flex-1 relative overflow-hidden bg-gray-200 rounded-lg">
            <div className="w-full h-full flex flex-col items-center justify-center">
                <Skeleton className="h-8 w-48 mb-4"/>
                <Skeleton className="h-24 w-64"/>
                <div className="grid grid-cols-5 gap-4 mt-8">
                    {Array(10).fill(0).map((_, i) => (
                        <Skeleton key={i} className="h-5 w-5"/>
                    ))}
                </div>
            </div>
        </div>
    </div>
);
}


return (
<div className="relative w-full h-full flex flex-col">
    <ZoomControls
        onZoomIn={zoomIn}
        onZoomOut={zoomOut}
        onReset={resetZoom}
    />
    
    {editable && (
        <>
            <ToolSelector
                selectedTool={selectedTool}
                onToolSelect={setSelectedTool}
                setShowHelp={setShowHelp}
                ShowHelp={showHelp}
                
            />
            <div className="absolute top-4 right-4 z-10">
                <FloorSelector/>
            </div>
        </>
    )}
    
    <div
        ref={containerRef}
        className="flex-1 relative overflow-hidden bg-gray-200 rounded-lg"
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onMouseLeave={handleMouseUp}
    >
        <div
            ref={canvasRef}
            className="w-[3000px] h-[3000px] absolute origin-top-left"
            style={{
                cursor: dragging ? 'grabbing' : (selectedTool === 'move' ? 'grab' : 
                       selectedTool === 'seat' ? 'cell' : 
                       selectedTool === 'section' ? 'crosshair' : 
                       selectedTool === 'stage' ? 'pointer' : 'default'),
                backgroundColor: '#f8f9fa',
                backgroundImage: 'radial-gradient(#e0e0e0 1px, transparent 1px)',
                backgroundSize: '20px 20px',
                transform: `scale(${scale}) translate(${originX}px, ${originY}px)`,
                transformOrigin: '0 0',
            }}
            onClick={handleCanvasClick}
        >
            {showStage && (
                <StageElement
                    editable={editable}
                    onMouseDown={handleElementMouseDown}
                    onResizerMouseDown={handleResizerMouseDown}
                />
            )}
            
            {/* Sections */}
            {visibleSections.map((section) => (
                <SectionElement
                    key={section.id}
                    section={section}
                    editable={editable}
                    onMouseDown={handleElementMouseDown}
                    onResizerMouseDown={handleResizerMouseDown}
                    onRemove={removeElement}
                />
            ))}
            
            {/* Seats */}
            {visibleSeats.map((seat) => (
                <SeatElement
                    key={seat.id}
                    seat={seat}
                    editable={editable}
                    onMouseDown={handleElementMouseDown}
                    onRemove={removeElement}
                />
            ))}
        </div>
        
        {/* Status indicator */}
        <div className="absolute bottom-20 right-4 p-2 bg-white/80 backdrop-blur-sm rounded-md text-xs text-gray-600 shadow-sm">
            <p>Zoom: {Math.round(scale * 100)}%</p>
            <p>Active Tool: {selectedTool || 'None'}</p>
            <p>Seats: {visibleSeats.length}</p>
            <p>Sections: {visibleSections.length}</p>
        </div>
    </div>
    
    {editable && showHelp && (
        <div
            className="absolute bottom-4 right-4 p-3 bg-white/90 backdrop-blur-sm rounded-md text-xs text-gray-600 shadow-sm max-w-xs"
            dir="rtl"
        >
            <p className="font-semibold mb-2">شورتکات‌های کیبورد:</p>
            <div className="grid grid-cols-2 gap-2">
                <span><kbd className="px-1.5 py-0.5 bg-gray-100 border border-gray-300 rounded">S</kbd> ابزار صندلی</span>
                <span><kbd className="px-1.5 py-0.5 bg-gray-100 border border-gray-300 rounded">C</kbd> ابزار بخش</span>
                <span><kbd className="px-1.5 py-0.5 bg-gray-100 border border-gray-300 rounded">T</kbd> ابزار صحنه</span>
                <span><kbd className="px-1.5 py-0.5 bg-gray-100 border border-gray-300 rounded">M</kbd> ابزار حرکت</span>
                <span><kbd className="px-1.5 py-0.5 bg-gray-100 border border-gray-300 rounded">+</kbd> بزرگنمایی</span>
                <span><kbd className="px-1.5 py-0.5 bg-gray-100 border border-gray-300 rounded">-</kbd> کوچک‌نمایی</span>
                <span><kbd className="px-1.5 py-0.5 bg-gray-100 border border-gray-300 rounded">0</kbd> اندازه اصلی</span>
                <span><kbd className="px-1.5 py-0.5 bg-gray-100 border border-gray-300 rounded">H</kbd> راهنما</span>
                <span><kbd className="px-1.5 py-0.5 bg-gray-100 border border-gray-300 rounded">Esc</kbd> لغو ابزار</span>
            </div>
            
            <p className="font-semibold mt-3 mb-1">راهنمای استفاده:</p>
            <ul className="list-disc list-inside space-y-1">
                <li>برای حرکت دادن نقشه، ابزار حرکت را انتخاب کنید یا هیچ ابزاری انتخاب نکنید و سپس بکشید.</li>
                <li>برای جابجایی صندلی‌ها، بخش‌ها یا صحنه، روی آنها کلیک کرده و بکشید.</li>
                <li>برای تغییر اندازه بخش‌ها یا صحنه، از دستگیره گوشه پایین راست استفاده کنید.</li>
                <li>برای حذف یک عنصر، روی دکمه ضربدر قرمز کلیک کنید.</li>
            </ul>
        </div>
    )}
    
    {editable && !showHelp && (
        <div
            className="absolute bottom-4 right-4 p-2 bg-white/80 backdrop-blur-sm rounded-md text-xs text-gray-600 shadow-sm"
            dir="rtl"
        >
            <p>برای نمایش راهنما، دکمه "Show Help" را بزنید یا کلید <kbd className="px-1.5 py-0.5 bg-gray-100 border border-gray-300 rounded">H</kbd> را فشار دهید.</p>
        </div>
    )}
</div>
);
};

import React, {useState} from "react";
import {useSeatMapStore, type Seat} from '@/stores/seatMapStore';
import {Tabs, TabsList, TabsContent, TabsTrigger} from "@/components/ui/tabs";
import {Separator} from "@/components/ui/separator";
import {Select, SelectContent, SelectItem, SelectTrigger, SelectValue} from "@/components/ui/select";
import {Button} from "@/components/ui/button";
import {Label} from "@/components/ui/label";
import {RadioGroup, RadioGroupItem} from "@/components/ui/radio-group";
import {Input} from "@/components/ui/input";
import {Slider} from "@/components/ui/slider";
import {Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter} from '@/components/ui/dialog';
import {toast} from "sonner"


export const SeatToolbar: React.FC = () => {
    const {addSeat, addSection, updateStage, setSeatMap} = useSeatMapStore();
    const [seatType, setSeatType] = useState('regular');
    const [seatStatus, setSeatStatus] = useState('available');
    const [sectionColor, setSectionColor] = useState('#D3E4FD');
    const [rowLabel, setRowLabel] = useState('A');
    const [startNumber, setStartNumber] = useState(1);
    const [sectionName, setSectionName] = useState('Main Section');
    const [rowCount, setRowCount] = useState(10);
    const [seatsPerRow, setSeatsPerRow] = useState(10);
    const [sectionWidth, setSectionWidth] = useState(200);
    const [sectionHeight, setSectionHeight] = useState(150);
    const [showSeatGridDialog, setShowSeatGridDialog] = useState(false);
    const [showSectionGridDialog, setShowSectionGridDialog] = useState(false);
    const [template, setTemplate] = useState(null);


    // Generate a grid of seats
    const handleGenerateGrid = () => {
        setShowSeatGridDialog(true);
    };


    // Generate seats within a grid
    const generateSeats = (gridX: number, gridY: number, spacing: number, rowCount: number, seatsPerRow: number) => {
        const seats: Seat[] = [];
        const seatSize = 20; // Standard seat size
        const rowChar = rowLabel.charCodeAt(0);


        for (let row = 0; row < rowCount; row++) {
            const currentRowLabel = String.fromCharCode(rowChar + row);


            for (let seat = 0; seat < seatsPerRow; seat++) {
                const seatNumber = startNumber + seat;
                seats.push({
                    id: `seat-${Date.now()}-${currentRowLabel}-${seatNumber}`,
                    x: gridX + (seat * (seatSize + spacing)),
                    y: gridY + (row * (seatSize + spacing)),
                    type: seatType as 'regular' | 'vip' | 'disabled',
                    row: currentRowLabel,
                    number: seatNumber,
                    status: seatStatus as 'available' | 'selected' | 'sold' | 'disabled'
                });
            }
        }


        return seats;
    };


    // Place seats in grid formation
    const placeSeatGrid = (x: number, y: number, spacing: number, rows: number, cols: number) => {
        const seats = generateSeats(x, y, spacing, rows, cols);
        seats.forEach(seat => addSeat(seat));


        toast("Seats Generated", {
            description: `Added ${seats.length} seats to the canvas`
        });


        setShowSeatGridDialog(false);
    };


    // Create a section and fill it with seats
    const handleAutoFillSection = () => {
        setShowSectionGridDialog(true);
    };


    // Create section with auto-filled seats
    const createSectionWithSeats = (x: number, y: number, rows: number, cols: number, spacing: number) => {
        // Add the section
        const sectionId = `section-${Date.now()}`;
        const calculatedWidth = cols * (20 + spacing) - spacing;
        const calculatedHeight = rows * (20 + spacing) - spacing;


        addSection({
            id: sectionId,
            x,
            y,
            width: calculatedWidth,
            height: calculatedHeight,
            name: sectionName,
            color: sectionColor
        });


        // Add seats within the section
        const seats = generateSeats(x + 10, y + 10, spacing, rows, cols);
        seats.forEach(seat => addSeat(seat));


        toast("Section Created", {
            description: `Section "${sectionName}" with ${seats.length} seats added`
        });


        setShowSectionGridDialog(false);
    };


    // Apply venue template
    const applyTemplate = () => {
        if (template === null) return;


        // Get current floor ID
        const {activeFloorId} = useSeatMapStore.getState().seatMap;


        const baseWidth = 3000;
        const baseHeight = 3000;


        switch (template) {
            case 'theater': {
                // Theater style layout with central stage and fan-like seating
                updateStage({
                    x: baseWidth / 2 - 300,
                    y: 150,
                    width: 600,
                    height: 80,
                    name: 'STAGE',
                    floorId: activeFloorId
                });


                // Orchestra section
                addSection({
                    id: `section-${Date.now()}-orchestra`,
                    x: baseWidth / 2 - 250,
                    y: 250,
                    width: 500,
                    height: 400,
                    name: 'Orchestra',
                    color: '#D3E4FD',
                    floorId: activeFloorId
                });


                // Mezzanine section
                addSection({
                    id: `section-${Date.now()}-mezzanine`,
                    x: baseWidth / 2 - 350,
                    y: 680,
                    width: 700,
                    height: 300,
                    name: 'Mezzanine',
                    color: '#FDE1D3',
                    floorId: activeFloorId
                });


                // Balcony section
                addSection({
                    id: `section-${Date.now()}-balcony`,
                    x: baseWidth / 2 - 400,
                    y: 1010,
                    width: 800,
                    height: 250,
                    name: 'Balcony',
                    color: '#F2FCE2',
                    floorId: activeFloorId
                });


                // Add some example seats
                const orchestraSeats = generateSeats(baseWidth / 2 - 200, 280, 10, 10, 20);
                orchestraSeats.forEach(seat => addSeat(seat));


                toast("Theater Template Applied", {
                    description: "Created stage and seating sections"
                });
                break;
            }
            case 'concert': {
                // Concert hall with stage and various seating sections
                updateStage({
                    x: baseWidth / 2 - 400,
                    y: 150,
                    width: 800,
                    height: 200,
                    name: 'STAGE',
                    floorId: activeFloorId
                });


                // Front section
                addSection({
                    id: `section-${Date.now()}-front`,
                    x: baseWidth / 2 - 350,
                    y: 400,
                    width: 700,
                    height: 300,
                    name: 'Front Section',
                    color: '#D946EF',
                    floorId: activeFloorId
                });


                // Mid section
                addSection({
                    id: `section-${Date.now()}-mid`,
                    x: baseWidth / 2 - 450,
                    y: 750,
                    width: 900,
                    height: 350,
                    name: 'Middle Section',
                    color: '#9b87f5',
                    floorId: activeFloorId
                });


                // Rear section
                addSection({
                    id: `section-${Date.now()}-rear`,
                    x: baseWidth / 2 - 500,
                    y: 1150,
                    width: 1000,
                    height: 400,
                    name: 'Rear Section',
                    color: '#D3E4FD',
                    floorId: activeFloorId
                });


                toast("Concert Hall Template Applied", {
                    description: "Created stage and seating areas"
                });
                break;
            }
            case 'stadium': {
                // Stadium with central field and surrounding seating
                // Field/court
                addSection({
                    id: `section-${Date.now()}-field`,
                    x: baseWidth / 2 - 400,
                    y: baseHeight / 2 - 250,
                    width: 800,
                    height: 500,
                    name: 'Field',
                    color: '#F2FCE2',
                    floorId: activeFloorId
                });


                // North stands
                addSection({
                    id: `section-${Date.now()}-north`,
                    x: baseWidth / 2 - 400,
                    y: baseHeight / 2 - 400,
                    width: 800,
                    height: 100,
                    name: 'North Stand',
                    color: '#FDE1D3',
                    floorId: activeFloorId
                });


                // South stands
                addSection({
                    id: `section-${Date.now()}-south`,
                    x: baseWidth / 2 - 400,
                    y: baseHeight / 2 + 300,
                    width: 800,
                    height: 100,
                    name: 'South Stand',
                    color: '#FDE1D3',
                    floorId: activeFloorId
                });


                // East stands
                addSection({
                    id: `section-${Date.now()}-east`,
                    x: baseWidth / 2 - 550,
                    y: baseHeight / 2 - 250,
                    width: 100,
                    height: 500,
                    name: 'East Stand',
                    color: '#E5DEFF',
                    floorId: activeFloorId
                });


                // West stands
                addSection({
                    id: `section-${Date.now()}-west`,
                    x: baseWidth / 2 + 450,
                    y: baseHeight / 2 - 250,
                    width: 100,
                    height: 500,
                    name: 'West Stand',
                    color: '#E5DEFF',
                    floorId: activeFloorId
                });


                toast("Stadium Template Applied", {
                    description: "Created field and stands"
                });
                break;
            }
            case 'conference': {
                // Conference room with presentation area
                updateStage({
                    x: baseWidth / 2 - 250,
                    y: 150,
                    width: 500,
                    height: 100,
                    name: 'PODIUM',
                    floorId: activeFloorId
                });


                // Main seating area
                addSection({
                    id: `section-${Date.now()}-main`,
                    x: baseWidth / 2 - 350,
                    y: 300,
                    width: 700,
                    height: 600,
                    name: 'Main Seating',
                    color: '#F1F0FB',
                    floorId: activeFloorId
                });


                // Add some example seats in classroom style rows
                const conferenceSeats = generateSeats(baseWidth / 2 - 300, 330, 15, 12, 14);
                conferenceSeats.forEach(seat => addSeat(seat));


                toast("Conference Template Applied", {
                    description: "Created podium and seating area"
                });
                break;
            }
            default:
                toast("Template Not Found", {
                    description: "Selected template could not be applied"
                });
        }
    };


    return (
        <div className="p-4 h-full overflow-y-auto">
            <h2 className="font-semibold text-lg mb-4">
                ابزارهای طراحی
            </h2>


            <Tabs defaultValue="seat" className="w-full" dir="rtl">
                <TabsList className="grid grid-cols-2 mb-4">
                    <TabsTrigger value="seat">
                        صندلی‌ها
                    </TabsTrigger>
                    <TabsTrigger value="section">
                        بخش‌ها
                    </TabsTrigger>
                </TabsList>


                <TabsContent value="seat" className="space-y-6">
                    <div className="space-y-4">
                        <div>
                            <Label className="text-sm font-medium">
                                نوع صندلی
                            </Label>
                            <RadioGroup
                                defaultValue="regular"
                                value={seatType}
                                onValueChange={setSeatType}
                                className="flex flex-col space-y-1 mt-2"
                                dir="rtl"
                            >
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="regular" id="seat-regular"/>
                                    <Label htmlFor="seat-regular" className="cursor-pointer">عادی</Label>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="vip" id="seat-vip"/>
                                    <Label htmlFor="seat-vip" className="cursor-pointer">ویژه</Label>
                                </div>
                            </RadioGroup>
                        </div>


                        <div>
                            <Label className="text-sm font-medium">وضعیت صندلی</Label>
                            <RadioGroup
                                defaultValue="available"
                                value={seatStatus}
                                onValueChange={setSeatStatus}
                                className="flex flex-col space-y-1 mt-2"
                                dir="rtl"
                            >
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="available" id="status-available"/>
                                    <Label htmlFor="status-available" className="cursor-pointer">فعال</Label>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="disabled" id="status-disabled"/>
                                    <Label htmlFor="status-disabled" className="cursor-pointer">غیرفعال</Label>
                                </div>
                            </RadioGroup>
                        </div>


                        <Separator/>


                        <div>
                            <Label htmlFor="row" className="text-sm font-medium">عنوان ردیف</Label>
                            <Input
                                id="row"
                                className="mt-1"
                                placeholder="A"
                                value={rowLabel}
                                onChange={(e) => setRowLabel(e.target.value)}
                            />
                        </div>


                        <div>
                            <Label htmlFor="startNumber" className="text-sm font-medium">شماره شروع</Label>
                            <Input
                                id="startNumber"
                                className="mt-1"
                                type="number"
                                min="1"
                                value={startNumber}
                                onChange={(e) => setStartNumber(parseInt(e.target.value))}
                            />
                        </div>


                        <div className="pt-2">
                            <Button onClick={handleGenerateGrid} className="w-full bg-cyan-300 hover:bg-cyan-400">
                                ایجاد صندلی‌ها
                            </Button>
                        </div>
                    </div>
                </TabsContent>
                <TabsContent value="section" className="space-y-6">
                    <div className="space-y-4">
                        <div>
                            <Label htmlFor="sectionName" className="text-sm font-medium">نام بخش</Label>
                            <Input
                                id="sectionName"
                                className="mt-1"
                                placeholder="Main Floor"
                                value={sectionName}
                                onChange={(e) => setSectionName(e.target.value)}
                            />
                        </div>


                        <div>
                            <Label htmlFor="sectionColor" className="text-sm font-medium">رنگ بخش</Label>
                            <div className="flex mt-1 space-x-2">
                                <div
                                    className="w-8 h-8 rounded border border-gray-300"
                                    style={{backgroundColor: sectionColor}}
                                />
                                <Input
                                    id="sectionColor"
                                    type="color"
                                    value={sectionColor}
                                    onChange={(e) => setSectionColor(e.target.value)}
                                    className="w-full h-8"
                                />
                            </div>
                        </div>


                        <div>
                            <Label htmlFor="sectionWidth" className="text-sm font-medium">عرض</Label>
                            <div className="flex items-center space-x-2 mt-1">
                                <Slider
                                    value={[sectionWidth]}
                                    max={800}
                                    min={50}
                                    step={10}
                                    onValueChange={(value) => setSectionWidth(value[0])}
                                    className="w-full"
                                />
                                <span className="text-sm w-16">{sectionWidth}px</span>
                            </div>
                        </div>


                        <div>
                            <Label htmlFor="sectionHeight" className="text-sm font-medium">ارتفاع</Label>
                            <div className="flex items-center space-x-2 mt-1">
                                <Slider
                                    value={[sectionHeight]}
                                    max={600}
                                    min={50}
                                    step={10}
                                    onValueChange={(value) => setSectionHeight(value[0])}
                                    className="w-full"
                                />
                                <span className="text-sm w-16">{sectionHeight}px</span>
                            </div>
                        </div>


                        <Separator/>


                        <div>
                            <Label htmlFor="rowCount" className="text-sm font-medium">تعداد ردیف</Label>
                            <Input
                                id="rowCount"
                                className="mt-1"
                                type="number"
                                min="1"
                                value={rowCount}
                                onChange={(e) => setRowCount(parseInt(e.target.value))}
                            />
                        </div>


                        <div>
                            <Label htmlFor="seatsPerRow" className="text-sm font-medium">صندلی در هر ردیف</Label>
                            <Input
                                id="seatsPerRow"
                                className="mt-1"
                                type="number"
                                min="1"
                                value={seatsPerRow}
                                onChange={(e) => setSeatsPerRow(parseInt(e.target.value))}
                            />
                        </div>


                        <div className="pt-2">
                            <Button onClick={handleAutoFillSection}
                                    className="w-full bg-amber-300 text-black hover:bg-amber-400">
                                پرکردن خودکار بخش
                            </Button>
                        </div>
                    </div>
                </TabsContent>
            </Tabs>


            <Separator className="my-6"/>


            <div className="space-y-4">
                <h3 className="font-medium">طرح‌های آماده</h3>
                <Select onValueChange={setTemplate} dir="rtl">
                    <SelectTrigger className="w-full">
                        <SelectValue placeholder="انتخاب طرح"/>
                    </SelectTrigger>
                    <SelectContent>
                        <SelectItem value="theater">تئاتر</SelectItem>
                        <SelectItem value="concert">سالن کنسرت</SelectItem>
                        <SelectItem value="stadium">استادیوم</SelectItem>
                        <SelectItem value="conference">کنفرانس</SelectItem>
                    </SelectContent>
                </Select>


                <Button variant="outline" className="w-full" onClick={applyTemplate}>
                    اعمال طرح
                </Button>
            </div>


            {/* Seat Grid Dialog */}
            <Dialog open={showSeatGridDialog} onOpenChange={setShowSeatGridDialog}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Generate Seat Grid</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4 py-4">
                        <div className="grid grid-cols-2 gap-4">
                            <div>
                                <Label htmlFor="gridX">X Position</Label>
                                <Input id="gridX" type="number" defaultValue={800}/>
                            </div>
                            <div>
                                <Label htmlFor="gridY">Y Position</Label>
                                <Input id="gridY" type="number" defaultValue={400}/>
                            </div>
                        </div>
                        <div className="grid grid-cols-2 gap-4">
                            <div>
                                <Label htmlFor="gridRows">Rows</Label>
                                <Input id="gridRows" type="number" min="1" defaultValue={rowCount}/>
                            </div>
                            <div>
                                <Label htmlFor="gridCols">Columns</Label>
                                <Input id="gridCols" type="number" min="1" defaultValue={seatsPerRow}/>
                            </div>
                        </div>
                        <div>
                            <Label htmlFor="gridSpacing">Spacing (px)</Label>
                            <Input id="gridSpacing" type="number" min="0" defaultValue={5}/>
                        </div>
                    </div>
                    <DialogFooter>
                        <Button variant="outline" onClick={() => setShowSeatGridDialog(false)}>Cancel</Button>
                        <Button onClick={() => {
                            const x = parseInt((document.getElementById('gridX') as HTMLInputElement).value);
                            const y = parseInt((document.getElementById('gridY') as HTMLInputElement).value);
                            const rows = parseInt((document.getElementById('gridRows') as HTMLInputElement).value);
                            const cols = parseInt((document.getElementById('gridCols') as HTMLInputElement).value);
                            const spacing = parseInt((document.getElementById('gridSpacing') as HTMLInputElement).value);
                            placeSeatGrid(x, y, spacing, rows, cols);
                        }}>Generate Seats</Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>


            {/* Section Grid Dialog */}
            <Dialog open={showSectionGridDialog} onOpenChange={setShowSectionGridDialog}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Create Section with Seats</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4 py-4">
                        <div className="grid grid-cols-2 gap-4">
                            <div>
                                <Label htmlFor="sectionX">X Position</Label>
                                <Input id="sectionX" type="number" defaultValue={800}/>
                            </div>
                            <div>
                                <Label htmlFor="sectionY">Y Position</Label>
                                <Input id="sectionY" type="number" defaultValue={400}/>
                            </div>
                        </div>
                        <div className="grid grid-cols-2 gap-4">
                            <div>
                                <Label htmlFor="sectionRows">Rows</Label>
                                <Input id="sectionRows" type="number" min="1" value={rowCount}
                                       onChange={(e) => setRowCount(parseInt(e.target.value))}/>
                            </div>
                            <div>
                                <Label htmlFor="sectionCols">Columns</Label>
                                <Input id="sectionCols" type="number" min="1" value={seatsPerRow}
                                       onChange={(e) => setSeatsPerRow(parseInt(e.target.value))}/>
                            </div>
                        </div>
                        <div>
                            <Label htmlFor="seatSpacing">Seat Spacing (px)</Label>
                            <Input id="seatSpacing" type="number" min="0" defaultValue={10}/>
                        </div>
                    </div>
                    <DialogFooter>
                        <Button variant="outline" onClick={() => setShowSectionGridDialog(false)}>Cancel</Button>
                        <Button onClick={() => {
                            const x = parseInt((document.getElementById('sectionX') as HTMLInputElement).value);
                            const y = parseInt((document.getElementById('sectionY') as HTMLInputElement).value);
                            const rows = parseInt((document.getElementById('sectionRows') as HTMLInputElement).value);
                            const cols = parseInt((document.getElementById('sectionCols') as HTMLInputElement).value);
                            const spacing = parseInt((document.getElementById('seatSpacing') as HTMLInputElement).value);
                            createSectionWithSeats(x, y, rows, cols, spacing);
                        }}>Create Section</Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        </div>
    )
};


